# # check if rails
# load File.join(ENV['HOME'], '.railsrc') if (defined?(Rails) || ENV['RAILS_ENV'])
#
# # Auto indenting
# IRB.conf[:AUTO_INDENT] = true
#
# # ['rubygems', 'irbtools', 'awesome_print'].each do |gem_name|
# #   begin; require gem_name; rescue LoadError => e; puts e; end
# # end
#
# # Remove the annoying irb(main):001:0 and replace with >>
# IRB.conf[:PROMPT_MODE] = :SIMPLE
#
# # Save History between irb sessions
# require 'irb/ext/save-history'
# IRB.conf[:SAVE_HISTORY] = 10_000
# IRB.conf[:HISTORY_FILE] = "#{ENV['HOME']}/.irb-save-history"
#
# class Object
#   # list methods which aren't in superclass
#   # def local_methods(obj = self)
#   #   (obj.methods - obj.class.superclass.instance_methods).sort
#   # end
#
#   # print documentation
#   #
#   #   ri 'Array#pop'
#   #   Array.ri
#   #   Array.ri :pop
#   #   arr.ri :pop
#   def ri(method = nil)
#     unless method && method =~ /^[A-Z]/ # if class isn't specified
#       klass = self.kind_of?(Class) ? name : self.class.name
#       method = [klass, method].compact.join('#')
#     end
#     system 'ri', method.to_s
#   end
# end
#
# if defined?(::Bundler)
#   begin
#     global_gemset = ENV['GEM_PATH'].split(':').grep(/ruby.*@global/).first
#     if global_gemset
#       all_global_gem_paths = Dir.glob("#{global_gemset}/gems/*")
#       all_global_gem_paths.each do |p|
#         gem_path = "#{p}/lib"
#         $LOAD_PATH << gem_path
#       end
#     end
#   rescue
#   end
# end
#
# # Try to use pry instead of irb
# begin
#   require 'pry'
#   Pry.start
# rescue LoadError
# end
#
# exit
