require 'logger'

def enable_logger
  log_to(Logger.new(STDOUT))
end

def disable_logger
  log_to(nil)
end

def log_to(logger)
  ActiveRecord::Base.logger = logger
  ActiveRecord::Base.clear_active_connections!
end

# logging into console by default
enable_logger

# prints nice informations about a Model.
def show_model(object)
  y object.class == Class ? object.column_names.sort : object.class.column_names.sort
end

def show_tables
  y ActiveRecord::Base.connection.data_sources
end

# I use this one to dig into Rails core_ext
class Class
  def core_ext
    self.instance_methods.map {|m| [m, self.instance_method(m).source_location] }.select {|m| m[1] && m[1][0] =~/activesupport/}.map {|m| m[0]}.sort
  end
end

# Hit all models for auto-completion
ActiveRecord::Base.connection.data_sources.each {|t| begin; t.singularize.classify.constantize; rescue LoadError, NameError; end }

puts "Loaded railsrc"
