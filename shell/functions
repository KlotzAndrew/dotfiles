#! /bin/bash

# Reduce the size of the last screenshot
# shellcheck disable=SC2155
# shellcheck disable=SC2012
prss() {
  local resizewidth=200
  local filename=$(ls -t ~/Desktop/Screen\ Shot\ *.png | head -1)
  local newfile=~/Desktop/$(date +%s)_"$resizewidth".png
  convert -resize "$resizewidth" "$filename" "$newfile"

  echo "$newfile"
}

# Create a new directory and enter it
mkd() {
  mkdir -p "$@"
  cd "$@" || exit
}

# Make a temporary directory and enter it
tmpd() {
  local dir
  if [ $# -eq 0 ]; then
    dir=$(mktemp -d)
  else
    dir=$(mktemp -d -t "${1}.XXXXXXXXXX")
  fi
  cd "$dir" || exit
}

# Start an HTTP server from a directory, optionally specifying the port
server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# =============== FZF helpers ======================

# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
# shellcheck disable=SC2128
# shellcheck disable=SC2207
fe() {
  local IFS=$'\n'
  local files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# Modified version of fe() where you can press
#   - CTRL-O to open with `xdg-open` command,
#   - CTRL-E or Enter key to open with the $EDITOR
# shellcheck disable=SC2015
# shellcheck disable=SC2155
# shellcheck disable=SC2128
# shellcheck disable=SC2207
fo() {
  local IFS=$'\n'
  local out=($(fzf-tmux --query="$1" --exit-0 --expect=ctrl-o,ctrl-e))
  local key=$(head -1 <<< "$out")
  local file=$(head -2 <<< "$out" | tail -1)
  if [ -n "$file" ]; then
    [ "$key" = ctrl-o ] && open "$file" || ${EDITOR:-vim} "$file"
  fi
}

# shellcheck disable=SC2155
f() {
  local IN=$(rg --line-number --ignore-case --follow --color "always" . | fzf --ansi)
  # "filename:line_number: data"
  local file=$(echo $IN | awk -F ":" '{ print $1 }')
  local line=$(echo $IN | awk -F ":" '{ print $2 }')
  [[ -n "$file" ]] && ${EDITOR:-vim} "+$line" "$file"
}

# fd - cd to selected directory
# fd() {
#   local dir
#   dir=$(find ${1:-.} -path '*/\.*' -prune \
#                   -o -type d -print 2> /dev/null | fzf +m) &&
#   cd "$dir"
# }

# fda - including hidden directories
# shellcheck disable=SC2164
fda() {
  local dir
  dir=$(find "${1:-.}" -type d 2> /dev/null | fzf +m) && cd "$dir"
}

# fdr - cd to selected parent directory
# shellcheck disable=SC2164
# shellcheck disable=SC2155
fdr() {
  local dirs=()
  get_parent_dirs() {
    if [[ -d "${1}" ]]; then dirs+=("$1"); else return; fi
    if [[ "${1}" == '/' ]]; then
      for _dir in "${dirs[@]}"; do echo "$_dir"; done
    else
      get_parent_dirs "$(dirname "$1")"
    fi
  }
  local DIR=$(get_parent_dirs "$(realpath "${1:-$PWD}")" | fzf-tmux --tac)
  cd "$DIR"
}

# cdf - cd into the directory of the selected file
# shellcheck disable=SC2164
cdf() {
   local file
   local dir
   file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
}

# utility function used to run the command in the shell
runcmd () {
  perl -e 'ioctl STDOUT, 0x5412, $_ for split //, <>'
}

# fh - repeat history
# shellcheck disable=SC2015
fh() {
  ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -re 's/^\s*[0-9]+\s*//' | runcmd
}

# utility function used to write the command in the shell
writecmd () {
  perl -e 'ioctl STDOUT, 0x5412, $_ for split //, do { chomp($_ = <>); $_ }'
}

# fhe - repeat history edit
# shellcheck disable=SC2015
fhe() {
  ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -re 's/^\s*[0-9]+\s*//' | writecmd
}

# fkill - kill process
fkill() {
  local pid
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    echo "$pid" | xargs kill -"${1:-9}"
  fi
}

# fbr - checkout git branch (including remote branches)
#   - sorted by most recent commit
#   - limit 30 last branches
fbr() {
  local branches branch
  branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout "$(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")"
}

# fco - checkout git branch/tag
fco() {
  local tags branches target
  tags=$(
    git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
  branches=$(
    git branch --all | grep -v HEAD             |
    sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
    sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
  target=$(
    (echo "$tags"; echo "$branches") |
    fzf-tmux -l40 -- --no-hscroll --ansi +m -d "\\t" -n 2 -1 -q "$*") || return
  git checkout "$(echo "$target" | awk '{print $2}')"
}

# fcoc - checkout git commit
# shellcheck disable=SC2001
fcoc() {
  local commits commit
  commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
  commit=$(echo "$commits" | fzf --tac +s +m -e) &&
  git checkout "$(echo "$commit" | sed "s/ .*//")"
}

# fshow - git commit browser
fshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\\{7\\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

# fcs - get git commit sha
# example usage: git rebase -i `fcs`
# shellcheck disable=SC2001
fcs() {
  local commits commit
  commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
  commit=$(echo "$commits" | fzf --tac +s +m -e --ansi --reverse) &&
  echo -n "$(echo "$commit" | sed "s/ .*//")"
}

# fstash - easier way to deal with stashes
# type fstash to get a list of your stashes
# enter shows you the contents of the stash
# ctrl-d shows a diff of the stash against your current HEAD
# ctrl-b checks the stash out as a branch, for easier merging
fstash() {
  local out q k sha
  while out=$(
    git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
    fzf --ansi --no-sort --query="$q" --print-query \
        --expect=ctrl-d,ctrl-b);
  do
    mapfile -t out <<< "$out"
    q="${out[0]}"
    k="${out[1]}"
    sha="${out[-1]}"
    sha="${sha%% *}"
    [[ -z "$sha" ]] && continue
    if [[ "$k" == 'ctrl-d' ]]; then
      git diff "$sha"
    elif [[ "$k" == 'ctrl-b' ]]; then
      git stash branch "stash-$sha" "$sha"
      break;
    else
      git stash show -p "$sha"
    fi
  done
}

# fs [FUZZY PATTERN] - Select selected tmux session
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fs() {
  local session
  session=$(tmux list-sessions -F "#{session_name}" | \
    fzf-tmux --query="$1" --select-1 --exit-0) &&
  tmux switch-client -t "$session"
}

# ftpane - switch pane (@george-b)
ftpane() {
  local panes current_window current_pane target target_window target_pane
  panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
  current_pane=$(tmux display-message -p '#I:#P')
  current_window=$(tmux display-message -p '#I')

  target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --reverse) || return

  target_window=$(echo "$target" | awk 'BEGIN{FS=":|-"} {print$1}')
  target_pane=$(echo "$target" | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

  if [[ $current_window -eq $target_window ]]; then
    tmux select-pane -t "${target_window}"."${target_pane}"
  else
    tmux select-pane -t "${target_window}"."${target_pane}" &&
    tmux select-window -t "$target_window"
  fi
}

# v - open files in ~/.viminfo
v() {
  local files
  files=$(grep '^>' ~/.viminfo | cut -c3- |
          while read -r line; do
            [ -f "${line/\~/$HOME}" ] && echo "$line"
          done | fzf-tmux -d -m -q "$*" -1) && vim "${files//\~/$HOME}"
}

aws_clear() {
    unset AWS_ACCESS_KEY_ID
    unset AWS_SECRET_ACCESS_KEY
    unset AWS_DEFAULT_REGION
    unset AWS_SESSION_TOKEN
}

aws_creds_to_env() {
  local csv_filename=$1
  local csv_creds=$(awk 'NR == 2' "$csv_filename" | tr -dc '[:print:]')
  local access_key_id=$(echo $csv_creds |  awk -F ',' '{print $1}')
  local secret_access_key=$(echo $csv_creds |  awk -F ',' '{print $2}')

  export AWS_DEFAULT_REGION="us-east-1"
  export AWS_SECRET_ACCESS_KEY="$secret_access_key"
  export AWS_ACCESS_KEY_ID="$access_key_id"

  echo "set access key id and access key!"
}

aws_session_token() {
  aws_clear
  local mfa_device=$1
  local token_code=$2

  local aws_resp="$(awscli sts get-session-token \
    --serial-number "$mfa_device" \
    --query 'Credentials.[AccessKeyId, SecretAccessKey, SessionToken]' \
    --output text --token-code "$token_code")"

  local -a aws_creds
  IFS=$'\t' read -ra aws_creds <<< "$aws_resp"
  if (( "${#aws_creds[@]}" != 3 )); then
    echo "Failed to get temporary token from AWS" >&2
    echo "$aws_resp"
    return 1
  fi

  export AWS_DEFAULT_REGION=us-east-1

  local export_args=(
    "AWS_ACCESS_KEY_ID=${aws_creds[0]}"
    "AWS_SECRET_ACCESS_KEY=${aws_creds[1]}"
    "AWS_SESSION_TOKEN=${aws_creds[2]%$'\r'}"
  )

  if ! export "${export_args[@]}"; then
    echo "Unable to set AWS environment variables" >&2
    echo "$aws_resp"
    return 1
  fi

  return 0
}
