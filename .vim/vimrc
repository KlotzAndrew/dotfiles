execute pathogen#infect()
call pathogen#helptags()

filetype plugin indent on "Filetype plugins

set number		"Line numbers
set autoread		"Reload files changed outside vim
set showcmd
set ruler
set noerrorbells

set colorcolumn=80
set splitright
set splitbelow
set hidden

set noswapfile
set nobackup

set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set smarttab
set autoindent

set wrap
set linebreak

let mapleader = ","

nmap <leader>l :set list!<CR>
set listchars=space:.,tab:▸\ ,eol:¬

" Share system clipboard
set clipboard=unnamedplus

" Search
set incsearch   " Find match as we type
set hlsearch    " Highlight match
set ignorecase  " Ignore case
set smartcase   " Override if uppercase

"===== better splits
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Clear highlighting on escape in normal mode
" The second line is needed for mapping to the escape key since Vim internally
" uses escape to represent special keys.
nnoremap <esc> :noh<return><esc>
nnoremap <esc>^[ <esc>^[

"File Type settings
au BufNewFile,BufRead *.go setlocal noet ts=4 sw=4 sts=4
au BufNewFile,BufRead *.rb,*.rake setlocal et ts=2 sw=2 sts=2
au BufNewFile,BufRead *.py setlocal et ts=4 sw=4 sts=4
au BufNewFile,BufRead *.yml,*.yaml setlocal et ts=2 sw=2
au BufNewFile,BufRead *.cpp,*.hpp setlocal et ts=2 sw=2
au BufNewFile,BufRead *.json setlocal et ts=2 sw=2
au BufNewFile,BufRead *.js setlocal et ts=2 sw=2

au FileType nginx setlocal noet ts=4 sw=4 sts=4
autocmd FileType dockerfile set noet ts=4 sw=4 sts=4
autocmd FileType Makefile set noet ts=4 sw=4 sts=4

"==================== Plugins ====================

" Solarized!
syntax enable
set background=dark
" let g:solarized_termcolors=256
let g:solarized_termtrans=1
colorscheme solarized

" Airline
let g:airline_solarized_bg='dark'

"==================== NerdTree ====================
map <C-n> :NERDTreeToggle<CR>
nmap ,n :NERDTreeFind<CR>
let NERDTreeShowHidden=1
let NERDTreeIgnore=['\.git$']

"open when no files specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"close when no files left
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"==================== FZF ====================
set rtp+=~/.fzf

command! -bang -nargs=* Find call fzf#vim#grep('rg --line-number --ignore-case --hidden --follow --color "always" '.shellescape(<q-args>), 1, <bang>0)

"==================== Vim-go ====================
let g:go_fmt_fail_silently = 0
let g:go_fmt_command = "goimports"
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1

let g:go_auto_type_info = 1
let g:go_auto_sameids = 1

"==================== Vim-Easy-Align ============
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
